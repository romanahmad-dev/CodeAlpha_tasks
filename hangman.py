# -*- coding: utf-8 -*-
"""Hangman.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OdI1UJ2HJYvLMzg3kxCyLpTqAsHYS-eM
"""

import random

# Function to get a random word from the list
def get_random_word(words):
    return random.choice(words).lower()

# Function to display the current state of the word with guessed letters
def display_word(word, guessed_letters):
    return ' '.join([letter if letter in guessed_letters else '_' for letter in word])

# Function to display hangman stages based on the number of incorrect guesses
def display_hangman(tries):
    stages = [
        """
           -----
           |   |
               |
               |
               |
               |
        --------
        """,
        """
           -----
           |   |
           O   |
               |
               |
               |
        --------
        """,
        """
           -----
           |   |
           O   |
           |   |
               |
               |
        --------
        """,
        """
           -----
           |   |
           O   |
          /|   |
               |
               |
        --------
        """,
        """
           -----
           |   |
           O   |
          /|\\  |
               |
               |
        --------
        """,
        """
           -----
           |   |
           O   |
          /|\\  |
          /    |
               |
        --------
        """,
        """
           -----
           |   |
           O   |
          /|\\  |
          / \\  |
               |
        --------
        """
    ]
    return stages[tries]

# Main function to play the Hangman game
def play_hangman():
    words = ['python', 'javascript', 'hangman', 'programming', 'developer', 'algorithm']
    word_to_guess = get_random_word(words)  # Randomly select a word
    guessed_letters = []  # Letters that have been guessed
    incorrect_guesses = 0  # Track incorrect guesses
    max_incorrect_guesses = 6  # Set the limit for incorrect guesses

    print("Welcome to Hangman!")

    # Game loop
    while incorrect_guesses < max_incorrect_guesses:
        print(display_hangman(incorrect_guesses))  # Display hangman stage
        print(f"\nCurrent word: {display_word(word_to_guess, guessed_letters)}")
        print(f"Incorrect guesses: {incorrect_guesses}/{max_incorrect_guesses}")

        # Get player's guess
        guess = input("Guess a letter: ").lower()

        # Validate input
        if len(guess) != 1 or not guess.isalpha():
            print("Please enter a single valid letter.")
            continue

        # Check if the letter has already been guessed
        if guess in guessed_letters:
            print("You already guessed that letter.")
            continue

        guessed_letters.append(guess)  # Add guess to the list of guessed letters

        # Check if the guessed letter is in the word
        if guess in word_to_guess:
            print(f"Good guess! '{guess}' is in the word.")
        else:
            incorrect_guesses += 1
            print(f"Sorry, '{guess}' is not in the word.")

        # Check if the player has won
        if set(word_to_guess) <= set(guessed_letters):
            print(f"\nCongratulations! You've guessed the word: {word_to_guess}")
            break

    # Check if the player has lost
    if incorrect_guesses == max_incorrect_guesses:
        print(display_hangman(incorrect_guesses))  # Display the final stage
        print(f"\nYou've run out of guesses. The word was: {word_to_guess}")

# Start the game
play_hangman()